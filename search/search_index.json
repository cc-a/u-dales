{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"uDALES Docs","text":"<p>This is the documentation for the uDALES (urban Dutch Atmospheric Large Eddy Simulation) model. It contains user's guides and general reference documentation. If you are new to uDALES, please follow our getting started guide first.</p>"},{"location":"CONTRIBUTING/","title":"How to contribute","text":"<p>In general, you can contribute by reporting an issue or by directly contributing to the source code. For the latter, clone the repository, make your changes, and create a pull request (PR) with a clear description of your changes -- if you are unfamiliar with creating PRs, please see this guide first. Please also read the development notes before opening an issue or create a PR. For specific instructions on how to report a bug or how to submit a feature request, please see below:</p> <ul> <li>How to contribute</li> <li>Report a bug</li> <li>Request a new feature</li> </ul>"},{"location":"CONTRIBUTING/#report-a-bug","title":"Report a bug","text":"<p>Before creating bug reports, please check if similar issue have already been reported here. If none exist please create a new issue and include as many details as possible using the required template.</p>"},{"location":"CONTRIBUTING/#request-a-new-feature","title":"Request a new feature","text":"<p>Before creating a feature request, please check if a similar feature has been already asked here. If none exist please create a new feature request and include as many details as possible using the required template.</p>"},{"location":"DEVELOP/","title":"Development notes","text":""},{"location":"DEVELOP/#set-up","title":"Set up","text":"<p>Install all required packages for uDALES described in the prerequisites section, plus optionally Graphviz for generating graphs in the code viewer. E.g. installing all the required packages using Ubuntu's APT:</p> <pre><code>sudo apt update &amp;&amp; sudo apt install -y gfortran libopenmpi-dev openmpi-bin libnetcdf-dev libnetcdff-dev graphviz\n</code></pre> <p>Then, to set up the development environment for testing and generating the docs, download the latest version of Miniconda and install the required dependencies with:</p> <pre><code>conda env create -f environment.yml\n</code></pre> <p>Then activate with <code>conda activate udales</code>.</p>"},{"location":"DEVELOP/#installation","title":"Installation","text":"<p>To install uDALES on Linux, macOS, and WSL, use the following commands from the command prompt:</p> <pre><code>mkdir -p build/release\npushd build/release\ncmake ../..\nmake\n</code></pre> <p>To know more about build options, please see build/default options.</p>"},{"location":"DEVELOP/#running","title":"Running","text":"<p>A uDALES simulation needs to be executed from a directory containing all required input files. Examples of experiments and required inputs are in the <code>examples</code> directory. To run a uDALES simulation you need to specify the number of cpus <code>&lt;NCPU&gt;</code>, the path to the build file <code>&lt;BUILD&gt;</code> and the simulation configuration file <code>&lt;NAMOPTIONS&gt;</code> and execute the simulation with the following command:</p> <pre><code>mpiexec -n &lt;NCPU&gt; &lt;BUILD&gt; &lt;NAMOPTIONS&gt;\n</code></pre>"},{"location":"DEVELOP/#testing","title":"Testing","text":"<p>Please refer to Test docs.</p>"},{"location":"DEVELOP/#documentation","title":"Documentation","text":"<pre><code>mkdocs build --site-dir build/html\nford docs/udales-docs-software.md\n</code></pre>"},{"location":"DEVELOP/#examples-input-plots","title":"Examples input plots","text":"<p>To create domain plots of the examples, run the following from your command line (requires MATLAB):</p> <pre><code> matlab -nosplash -nodesktop -r \"cd('tools/examples'); plot_blocks('&lt;CASE_NUMBER&gt;'); quit\"\n</code></pre> <p>where <code>&lt;CASE_NUMBER&gt;</code> is e.g. <code>201</code>. Plots are then saved in their respective example folders.   </p>"},{"location":"DEVELOP/#examples-outputs-and-plots","title":"Examples outputs and plots","text":"<p>Run the following script to run and generate outputs for all example cases:</p> <pre><code>./tools/examples/run_examples.sh\n</code></pre> <p>Then, to create a sample plot for case <code>102</code> run the following from your command line (requires MATLAB):</p> <pre><code>matlab -nosplash -nodesktop -r \"cd('tools/examples'); plot_fielddump_slice('102','u','y',32,1); quit\"\n</code></pre>"},{"location":"DEVELOP/#versioning","title":"Versioning","text":"<p>This project uses semantic versioning.</p>"},{"location":"udales-2decomp/","title":"Parallelisation","text":"<p>Parallelisation of u-DALES 2.0 is achieved using the 2DECOMP&amp;FFT library. The 2DECOMP&amp;FFT library decomposes Cartesian domains using a 2-D pencil-based decomposition, assigning a pencil to each MPI rank. Operations on each pencil can then be performed in parallel. Users should ensure the 2-D decomposition grid factors the mesh exactly to ensure load balance. By doing so each pencil contains an equal number of grid points for an equal volume of work per MPI rank.</p> <p>Two communication patterns implemented by 2DECOMP&amp;FFT are used in u-DALES 2.0.</p>"},{"location":"udales-2decomp/#data-transposes","title":"Data transposes","text":"<p>Solving the Poisson problem using FFTs requires access to the full extent of an axis in each orientation. The 2DECOMP&amp;FFT library implements transpose operations from Z-&gt;Y, Y-&gt;X, X-&gt;Y and Y-&gt;Z pencil orientations allowing the solver to process each orientation in turn.</p>"},{"location":"udales-2decomp/#halo-exchanges","title":"Halo exchanges","text":"<p>The discretisation stencils in the transport equations require neighbour data. At pencil boundaries this requires exchanging data between neighbouring pencils. The 2DECOMP&amp;FFT library provides halo exchange subroutines to support such data exchange.</p>"},{"location":"udales-docs-software/","title":"Udales docs software","text":"<p>project: uDALES author: The uDALES Team project_github: https://github.com/uDALES/u-dales summary: TODO: github: https://github.com/uDALES src_dir: ../src output_dir: ../build/html/udales-docs-software media_dir: assets docmark: ! predocmark: !! docmark_alt: $$$ display:  public           private           protected source: true graph: true coloured_edges: true preprocess: false print_creation_date: true creation_date: %Y-%m-%d %H:%M %z md_extensions: markdown.extensions.toc                markdown.extensions.smarty</p>"},{"location":"udales-example-simulations/","title":"Examples","text":""},{"location":"udales-example-simulations/#example-simulations","title":"Example simulations","text":"<p>uDALES simulates a large variety of urban case studies. Here we showcase a few examples (List of examples) with different atmospheric stabilities and various setups (overview in Table 1) to help you get started. The setups are in the <code>namoptions</code> file of your simulation.</p> <p>Note that we limited the simulation time to just a few minutes for demonstration, if you are looking to conduct realistic simulations, you need a much longer simulation time. If you wish to run all examples automatically and plot inputs and outputs as shown in this guide, follow the instructions detailed in the  development notes instead.</p>"},{"location":"udales-example-simulations/#prerequisites","title":"Prerequisites","text":"<p>All examples below assume that you have installed uDALES as per our getting started guide.</p> <p>Set up the paths and variables for running the simulation, for example with the following:</p> <pre><code># We assume you are running the following commands from your\n# top-level project directory.\n\nexport DA_TOOLSDIR=$(pwd)/u-dales/tools # Directory of scripts\nexport DA_BUILD=$(pwd)/u-dales/build/release/u-dales # Build file\nexport NCPU=2 # Number of CPUs to use for a simulation\nexport DA_WORKDIR=$(pwd)/outputs # Output top-level directory\n</code></pre>"},{"location":"udales-example-simulations/#run","title":"Run","text":"<p>Example cases are located under <code>u-dales/examples</code>.</p> <p>All examples are run using the following command:</p> <pre><code># We assume you are running the following commands from your\n# top-level project directory.\n\n# General syntax: local_execute.sh exp_directory\n./u-dales/tools/local_execute.sh u-dales/examples/001\n</code></pre>"},{"location":"udales-example-simulations/#customising-simulations","title":"Customising simulations","text":"<p>If you want to make any changes to the example simulations, e.g. changing the domain size, follow the set-up steps in the getting started guide to obtain a copy of the simulation setup and make the changes to your copy of the setup. You may need to run some pre-processing steps (see Pre-processing) before running the simulation. These cases are indicated as such in Table 1.</p>"},{"location":"udales-example-simulations/#main-simulation-set-up-options","title":"Main simulation set-up options","text":"<p>Below is a list of common setups and options for urban case studies. A complete list of all options available with uDALES can be found in the Configuration document.</p> <p>Table 1: Main setups of urban case studies and reference example simulation(s).</p> Type Setting Requires pre-processing Example simulation Domain size and resolution yes all Domain equidistant grid yes 001, 002, 101, 102, 501, 502 Domain stretched z-grid yes 201 Domain warmstart no 102 Morphology no buildings yes 001 Morphology infinite canyon builings yes 101 Morphology aligned cuboid buildings yes 002, 501 Morphology staggered cuboid buildings yes 102 Morphology pre-defined buildings yes 201 Morphology LIDAR-image buildings yes 502 Forcing pressure gradient yes 001 Forcing volume flow rate no 101, 102, 501 Forcing outflow rate no -- Forcing free stream velocity no -- Forcing Coriolis and nudging yes 201 Forcing driving data no 502 Lateral momentum boundary conditions (BCs) periodic no 001, 002, 101, 102, 201, 501 Lateral momentum BCs driving data no 502 Passive scalar source point source no 102 Passive scalar source line source no 101 Passive scalar source source network no -- Lateral scalar BCs periodic no 101, 501 Lateral scalar BCs inflow-outflow no 102 Surface and top scalar BCs zero flux no -- Surface and top scalar BCs constant flux no 102 Surface and top scalar BCs isothermal no 101, 501 Surface and top scalar BCs energy balance yes 201 Output instantaneous fields no 001, 101, 102, 201, 502 Output time-averaged fields no 201, 502 Output space-averaged (along y) fields no 101 Output space-averaged (along x,y) profiles no 002, 102, 201, 501, 502"},{"location":"udales-example-simulations/#list-of-examples","title":"List of examples","text":"<ul> <li>Standard simulation setup</li> <li>Neutral simulations</li> <li>001<ul> <li>No buildings, bottom surface roughness</li> <li>Constant pressure gradient</li> <li>Output: instantaneous fields</li> </ul> </li> <li>002<ul> <li>Aligned cuboid buildings</li> <li>Output: space-time averaged profiles</li> </ul> </li> <li>Non-neutral simulations</li> <li>101<ul> <li>Infinite canyon buildings</li> <li>Output: space-averaged along y</li> <li>Volume flow rate forcing in x</li> <li>Temperature</li> <li>Isothermal BC for temperature</li> <li>Passive scalars line source</li> <li>Output: instantaneous fields for temperature and scalars</li> </ul> </li> <li>102<ul> <li>Prerequisites for warmstart simulation</li> <li>Staggered cuboid buildings</li> <li>Volume flow rate forcing in x and y</li> <li>Constant thermal flux BC for temperature</li> <li>Passive scalars point source</li> <li>Scalar inflow-outflow BC</li> <li>Warmstart</li> <li>Coldstart</li> </ul> </li> <li>Energy balance simulation</li> <li>201<ul> <li>Pre-defined buildings</li> <li>Grid-stretching in z</li> <li>Output: time averaged fields</li> <li>Energy Balance</li> <li>Moisture</li> <li>Coriolis forcing and nudging</li> </ul> </li> <li>Driver simulation</li> <li>501<ul> <li>Driver/precursor simulation</li> </ul> </li> <li>502<ul> <li>Prerequisites simulation with external forcing</li> <li>Buildings from LIDAR image</li> <li>Driven simulation</li> </ul> </li> </ul>"},{"location":"udales-example-simulations/#standard-simulation-setup","title":"Standard simulation setup","text":"<p>The below setups are required for any type of simulation. The simulation domain varies amongst the example simulations and is set-up for example by</p> <pre><code>&amp;DOMAIN\nimax         = 64\njtot         = 64\nkmax         = 64\nxsize        = 64\nysize        = 64\n&amp;INPS\nzsize        = 64\n</code></pre> <p>We also set an initial profile for u-wind velocity (and other variables if they are used) of e.g. u = 2 m/s by</p> <pre><code>&amp;INPS\nu0           = 2.\n</code></pre> <p>and add some random perturbations to the initial field, such that turbulence develops faster:</p> <pre><code>randu        = 0.01\n</code></pre> <p>Changes in the domain and initial profiles require pre-processing.</p> <p>Further, we recommend running the simulations with adaptive time-stepping, the Fast-Fourier-Transformation algorithm in the poisson solver (this will become default in the future) and using the Vreman sub-grid model:</p> <pre><code>&amp;RUN\nladaptive    = .true.\n&amp;DYNAMICS\nipoiss       = 0\n&amp;NAMSUBGRID\nlvreman      = .true.\n</code></pre> <p>Further information on these parameters is in the Namoptions overview, and more on the required pre-processing steps is found in Pre-processing.</p>"},{"location":"udales-example-simulations/#neutral-simulations","title":"Neutral simulations","text":""},{"location":"udales-example-simulations/#001","title":"001","text":""},{"location":"udales-example-simulations/#no-buildings-bottom-surface-roughness","title":"No buildings, bottom surface roughness","text":"<p>This simulation does not contain any buildings. Therefore we need to set:</p> <pre><code>&amp;INPS\nlflat        = .true.\n&amp;WALLS\nnfcts        = 0\n</code></pre> <p>A rough surface at the bottom is simulated by setting the following parameters:</p> <pre><code>&amp;BC\nwtsurf       = 0.\nwqsurf       = 0.\nthls         = 288.\nz0           = 0.01\nz0h          = 0.000067\n</code></pre> <p>where <code>z0</code> is the roughness length for momentum. Note that even though this is a neutral simulation, all of these parameters need to be specified to reasonable values. The simulation uses periodic lateral boundary conditions by default.</p>"},{"location":"udales-example-simulations/#constant-pressure-gradient","title":"Constant pressure gradient","text":"<p>A constant pressure gradient in x is set by</p> <pre><code>&amp;INPS\ndpdx         = 0.0001\n</code></pre>"},{"location":"udales-example-simulations/#output-instantaneous-fields","title":"Output: instantaneous fields","text":"<p>The simulation output contains the 3D instantaneous fields of u, v, and w. The output is produced after every 10 seconds of simulation runtime. We specify this by setting:</p> <pre><code>&amp;OUTPUT\nlfielddump   = .true.\nfieldvars    = 'u0,v0,w0'\ntfielddump   = 10.\n</code></pre>"},{"location":"udales-example-simulations/#002","title":"002","text":"<p>This simulation has a similar setup to <code>001</code> and additionally contains buildings.</p>"},{"location":"udales-example-simulations/#aligned-cuboid-buildings","title":"Aligned cuboid buildings","text":"<p>The simulation contains aligned cube-shaped buildings, which can be automatically added by the pre-processing by setting:</p> <pre><code>&amp;INPS\nlcube        = .true.\nblockheight  = 16\nblockwidth   = 16\ncanyonwidth  = 16\n</code></pre> <p>The corresponding number of blocks (including blocks on the floor) and block facets are (these are updated automatically by the preprocessing routine):</p> <pre><code>&amp;WALLS\nnblocks      = 17\nnfcts        = 33\n</code></pre>"},{"location":"udales-example-simulations/#output-space-time-averaged-profiles","title":"Output: space-time averaged profiles","text":"<p>The simulation output contains 1D space-averaged and space-time-averaged vertical profiles. The output is produced after every 10 seconds of simulation runtime and the time-average uses a sample time step of 1 second. We specify this by setting:</p> <pre><code>&amp;OUTPUT\nlxydump      = .true.\nlxytdump     = .true.\ntstatsdump   = 10.\ntsample      = 1.\n</code></pre>"},{"location":"udales-example-simulations/#non-neutral-simulations","title":"Non-neutral simulations","text":""},{"location":"udales-example-simulations/#101","title":"101","text":""},{"location":"udales-example-simulations/#infinite-canyon-buildings","title":"Infinite canyon buildings","text":"<p>This simulation has \"infinite canyons\" along the y-axis as buildings. We set this by using</p> <pre><code>&amp;INPS\nlcanyons     = .true.\nblockheight  = 16\nblockwidth   = 16\ncanyonwidth  = 16\n</code></pre>"},{"location":"udales-example-simulations/#output-space-averaged-along-y","title":"Output: space-averaged along y","text":"<p>Because there is no change in building geometry along y, it makes sense to look at the 2D statistics space-averaged along the y direction (with and without time-averaging):</p> <pre><code>&amp;OUTPUT\nlydump       = .true.\nlytdump      = .true.\n</code></pre>"},{"location":"udales-example-simulations/#volume-flow-rate-forcing-in-x","title":"Volume flow rate forcing in x","text":"<p>The simulation is driven by a fixed volume-flow rate forcing, which prescribes the domain-average velocity of u = 1.5 m/s:</p> <pre><code>&amp;PHYSICS\nluvolflowr   = .true.\nuflowrate    = 1.5\n</code></pre>"},{"location":"udales-example-simulations/#temperature","title":"Temperature","text":"<p>The simulation also considers changes in temperature. We therefore need to set</p> <pre><code>&amp;PHYSICS\nlbuoyancy    = .true.\nltempeq      = .true.\n</code></pre> <p>set an initial temperature profile (using the surface temperature <code>thl0</code> and the default lapse rate)</p> <pre><code>&amp;INPS\nthl0         = 290.\n</code></pre> <p>and specify the advection scheme for temperature:</p> <pre><code>&amp;DYNAMICS\niadv_thl     = 2\n</code></pre>"},{"location":"udales-example-simulations/#isothermal-bc-for-temperature","title":"Isothermal BC for temperature","text":"<p>The temperature on the facets is set by the values in <code>Tfacinit.f90</code> (288 K in this case). These temperatures do not change as the energy balance is not used as a default (<code>lEB = .false.</code>). A fixed temperature at the the top of the domain (<code>thl_top</code>) is set by</p> <pre><code>&amp;BC\nthl_top      = 285.\nBCtopT       = 2\n</code></pre> <p>The temperature flux between the building walls and surrounding air is determined by wall functions:</p> <pre><code>&amp;WALLS\niwalltemp    = 2\n</code></pre>"},{"location":"udales-example-simulations/#passive-scalars-line-source","title":"Passive scalars line source","text":"<p>A passive scalar line source is set by</p> <pre><code>&amp;SCALARS\nnsv          = 1\nlscasrcl     = .true.\nSS           = 1.\nsigS         = 0.5\n</code></pre> <p>and by specifying the scalar advection scheme:</p> <pre><code>&amp;DYNAMICS\niadv_sv      = 7\n</code></pre>"},{"location":"udales-example-simulations/#output-instantaneous-fields-for-temperature-and-scalars","title":"Output: instantaneous fields for temperature and scalars","text":"<p>We added the temperature and scalar concentration to the instantaneous fields:</p> <pre><code>&amp;OUTPUT\nfieldvars    = 'u0,v0,w0,th,s1'\n</code></pre>"},{"location":"udales-example-simulations/#102","title":"102","text":"Domain Output slice 3D output <p>The basic setup of this simulation is similar to <code>101</code>.</p>"},{"location":"udales-example-simulations/#prerequisites-for-warmstart-simulation","title":"Prerequisites for warmstart simulation","text":"<p>The simulation is continued from a previous simulation with a similar setup. The restart files (<code>initd</code> and <code>inits</code> for scalars) containing all relevant field data is saved in the example directory. The restart files are currently not included in the directory and can be downloaded examples_warmstart_102.zip or from the command line (Linux/macOS) with</p> <pre><code># From top-level project directory.\n\n# Download required files\npushd u-dales/examples/102/\ncurl -o examples_warmstart_102.zip -L https://www.dropbox.com/sh/20rsgpt0gh09gr7/AABuoCFtn6_zFTxx4k8pKqvLa?dl=1\nunzip examples_warmstart_102.zip\npopd\n</code></pre> <p>A warmstart simulation is required to have the same basic setup as the simulation is based on, including the numbers of CPUs it is run with. The example warmstart files are run on two CPUs, therefore this simulation will also require two CPUs. An alternative to running this simulation based on the previous output is described under Coldstart.</p>"},{"location":"udales-example-simulations/#staggered-cuboid-buildings","title":"Staggered cuboid buildings","text":"<p>The simulation has staggered cuboid buildings, which can be set up using</p> <pre><code>&amp;INPS\nlstaggered   = .true.\n</code></pre>"},{"location":"udales-example-simulations/#volume-flow-rate-forcing-in-x-and-y","title":"Volume flow rate forcing in x and y","text":"<p>The simulation is driven by a fixed volume-flow rate forcing for u and v:</p> <pre><code>&amp;PHYSICS\nluvolflowr   = .true.\nuflowrate    = 1.5\nlvvolflowr   = .true.\nvflowrate    = 0.3\n</code></pre>"},{"location":"udales-example-simulations/#constant-thermal-flux-bc-for-temperature","title":"Constant thermal flux BC for temperature","text":"<p>The temperature is determined by a constant thermal flux from the roads, building roofs and the top of the domain (<code>iwalltemp = 1</code> by default):</p> <pre><code>&amp;BC\nwtsurf       = -0.01\nwttop        = -0.01\nbctfz        = -0.01\n</code></pre>"},{"location":"udales-example-simulations/#passive-scalars-point-source","title":"Passive scalars point source","text":"<p>The simulation contains a scalar field with a scalar point source. The position of the point source is set by the coordinates <code>xS</code>,<code>yS</code>, and <code>zS</code> (location in metres). The strength of the scalar source is set by <code>SS</code>, and the standard deviation of the source emission is <code>sigS</code>.</p> <pre><code>&amp;SCALARS\nlscasrc      = .true.\nSS           = 1.\nsigS         = 0.5\nxS           = 4.\nyS           = 8.\nzS           = 3.\n</code></pre>"},{"location":"udales-example-simulations/#scalar-inflow-outflow-bc","title":"Scalar inflow-outflow BC","text":"<p>The scalar concentration is not determined by periodic boundary conditions like momentum and temperature, but leaves the domain at the outflow plane:</p> <pre><code>&amp;BC\nBCxs         = 2\n</code></pre> <p>The inlet profile is determined by the profile found in <code>scalar.inp.102</code> (defaults to 0. if unspecified)</p>"},{"location":"udales-example-simulations/#warmstart","title":"Warmstart","text":"<p>A warmstart simulation requires setting</p> <pre><code>&amp;RUN\nlwarmstart   = .true.\nstartfile    = 'initd00003172_xxx.102'\n</code></pre> <p>where the name of the <code>startfile</code> needs to match the name of the restart files (xxx instead of processor number).</p> <p>For a warmstart containing scalar concentration fields you need to additionally set</p> <pre><code>&amp;SCALARS\nlreadscal    = .true.\n</code></pre>"},{"location":"udales-example-simulations/#coldstart","title":"Coldstart","text":"<p>This describes an alternative, if the warmstart files are not available. Run the simulation with recommended runtime of &gt;= 1000 s and save the restart files by setting the restart time accordingly:</p> <pre><code>&amp;RUN\nlwarmstart   = .false.\nruntime      = 1001.\ntrestart     = 1000.\n</code></pre> <p>Then, change the switches as described above, and make sure <code>startfile</code> matches the name of your restart files.</p>"},{"location":"udales-example-simulations/#energy-balance-simulation","title":"Energy balance simulation","text":""},{"location":"udales-example-simulations/#201","title":"201","text":""},{"location":"udales-example-simulations/#pre-defined-buildings","title":"Pre-defined buildings","text":"<p>The buildings are read in by a file containing the block geometries (more information on blocks in uDALES can be found under docs/set-up):</p> <pre><code>&amp;INPS\nlblocksfile  = .true.\nblocksfile   = buildings.201\n</code></pre>"},{"location":"udales-example-simulations/#grid-stretching-in-z","title":"Grid-stretching in z","text":"<p>The vertical grid resolution is stretched by setting up the following parameters:</p> <pre><code>&amp;INPS\nzsize        = 160\nlzstretch    = .true.\nstretchconst = 0.01\nlstretchexp  = .true.\nhlin         = 40\ndzlin        = 1\n</code></pre> <p><code>zsize</code> is an initial target value for the final domain height and <code>hlin</code> determines how many non-stretched grid cells there are at the lower end of the domain. Make sure to always use non-stretched grid cells wherever buildings are present. <code>dzlin</code> specifies the resolution for the non-stretched grid cells. <code>lstretchexp</code> specifies the exponential grid stretching function to be used.</p>"},{"location":"udales-example-simulations/#output-time-averaged-fields","title":"Output: time averaged fields","text":"<p>We add 3D output fields that are averaged in time:</p> <pre><code>&amp;OUTPUT\nltdump       = .true.\n</code></pre>"},{"location":"udales-example-simulations/#energy-balance","title":"Energy Balance","text":"<p>The simulations solves the surface energy balance.</p> <pre><code>&amp;ENERGYBALANCE\nlEB          = .true.\nlconstW      = .true.\ndtEB         = 2.\nbldT         = 301.0\nwsoil        = 314.0\nwgrmax       = 451.0\nwwilt        = 172.0\nwfc          = 314.0\nskyLW        = 201.0\nGRLAI        = 2.1\nrsmin        = 200.0\n</code></pre> <p>For that we also need to use wall functions for temperature and moisture at the building facets:</p> <pre><code>&amp;WALLS\niwalltemp    = 2\niwallmoist   = 2\n</code></pre>"},{"location":"udales-example-simulations/#moisture","title":"Moisture","text":"<p>The energybalance contains a latent heat flux and therefore we need to solve the full wet thermodynamics including moisture:</p> <pre><code>&amp;PHYSICS\nlmoist       = .true.\n</code></pre> <p>The advection scheme for moisture is specified by:</p> <pre><code>&amp;DYNAMICS\niadv_qt      = 2\n</code></pre> <p>and domain top- values are chosen:</p> <pre><code>&amp;BC\nqt_top       = 0.0\n</code></pre>"},{"location":"udales-example-simulations/#coriolis-forcing-and-nudging","title":"Coriolis forcing and nudging","text":"<p>A coriolis force is specified:</p> <pre><code>&amp;PHYSICS\nlcoriol      = .true.\n</code></pre> <p>The geostrophic velocity is defined by default as a uniform profile of the initial velocity:</p> <pre><code>&amp;INPS\nu0           = 1.5\n</code></pre> <p>Nudging is applied in the top 64 cells of the domain with a relaxation timescale of 10800 seconds:</p> <pre><code>&amp;PHYSICS\nlnudge       = .true.\ntnudge       = 10800.\nnnudge       = 64\n</code></pre>"},{"location":"udales-example-simulations/#driver-simulation","title":"Driver simulation","text":""},{"location":"udales-example-simulations/#501","title":"501","text":"<p>This simulation is similar to <code>101</code> but does not contain any scalars. It is used as the precursor simulation for simulation <code>502</code>.</p>"},{"location":"udales-example-simulations/#driverprecursor-simulation","title":"Driver/precursor simulation","text":"<p>To save the output of a simulation into files that can be read by another simulation as driver-inputs, we set:</p> <pre><code>&amp;DRIVER\nidriver      = 1\ntdriverstart = 0\ndtdriver     = 0.15\ndriverstore  = 201\niplane       = 128\n</code></pre> <p><code>iplane</code> sets the index of the y-z plane we store (here this is equal to the outlet plane), and <code>(driverstore-1)*dtdriver</code> determines for how long you can run the driven simulation. The time when we start recording the planes should therefore be <code>tdriverstart</code> &lt;= <code>runtime</code> - <code>(driverstore-1)*dtdriver</code>. More information on these parameters is in the documentation on simulation setup.</p>"},{"location":"udales-example-simulations/#502","title":"502","text":""},{"location":"udales-example-simulations/#prerequisites-simulation-with-external-forcing","title":"Prerequisites simulation with external forcing","text":"<p>The driver input files are currently not included in the directory and can be downloaded examples_driver_501.zip or from the command line (Linux/macOS) with</p> <pre><code># From top-level project directory.\n\n# Download required files\npushd u-dales/examples/502/\ncurl -o examples_driver_501.zip -L https://www.dropbox.com/sh/spld3hqipqe17j1/AAA0cuzW3qc9ftY6dvHcSSL8a?dl=1\nunzip examples_driver_501.zip\npopd\n</code></pre> <p>These <code>*driver*</code> files need to be in the same place as the other input files. Alternatively, the <code>*driver*</code> files from simulation 501 can be used by copying them into the directory of 502. For that we recommend to set the <code>runtime</code> to at least 1000 s, and <code>tdriverstart</code> accordingly with <code>tdriverstart</code> &lt;= <code>runtime</code> - <code>(driverstore-1)*dtdriver</code>.</p>"},{"location":"udales-example-simulations/#buildings-from-lidar-image","title":"Buildings from LIDAR image","text":"<p>The buildings of this simulation are generated from a grey-scale image of the buildings and their heights.</p> <pre><code>&amp;INPS\nllidar       = .true.\nsourcename   = DAPPLE7.png\ndxinp        = 1\ndyinp        = 1\ndzinp        = 1\ncenteri      = 400\ncenterj      = 400\nmaxh         = 25\npad          = 3\nsmallarea    = 150\n</code></pre>"},{"location":"udales-example-simulations/#driven-simulation","title":"Driven simulation","text":"<p>This simulation is forced by the data from the stored outlet plane of simulation <code>501</code>:</p> <pre><code>&amp;DRIVER\nidriver      = 2\ndriverjobnr  = 501\ndriverstore  = 201\n</code></pre> <p>The runtime of this simulation is restricted by the simulation time of the driver output, which is <code>(driverstore-1)*dtdriver</code> of the precursor simulation <code>501</code>. The maximum runtime we can set is therefore</p> <pre><code>runtime      = 30.\ndtmax        = 0.15\n</code></pre> <p>and we want to set <code>dtmax</code> = <code>dtdriver</code> (<code>501</code>) to avoid interpolation of the driver snapshots.</p> <p>All boundary conditions (momentum, temperature) are set to inflow-outflow by:</p> <pre><code>&amp;BC\nBCxm         = 5\n</code></pre> <p>for which we will also need to use the cyclic reduction scheme of the poisson solver:</p> <pre><code>&amp;DYNAMICS\nipoiss       = 1\n</code></pre>"},{"location":"udales-getting-started/","title":"Getting Started","text":"<p>Getting started with uDALES to set up your own experiments is straightforward. This guide goes through the steps required to install uDALES, and set-up and run a simple example. Results are outputted in netCDF format, for a quick inspection you can use GUI tools such as Panoply or ncview. To learn more about pre- and post-processing steps see the what's next section.</p>"},{"location":"udales-getting-started/#singularity","title":"Singularity","text":"<p>If you have Singularity available on your system, you can use the provided scripts under <code>tools/singularity</code> to build and run uDALES cases locally or on HPC environments, for other options, see the sections below. If you are looking for information on how to install or use Singularity on your system, please refer to the Singularity documentation . The use of Singularity is undoubtedly the easiest way to build and run cases in uDALES as all dependencies are provided and uDALES will compile out of the box. Furthermore, users wishing to achieve a reasonable level of scientific reproducibility may archive software, tools, and data with their Singularity image containing OS and external libraries to an open access repository (e.g. Meyer et al., 2020).</p> <p>First clone the uDALES repository with:</p> <pre><code>https://github.com/uDALES/u-dales.git\n</code></pre> <p>Then, to build and download the Singularity image use:</p> <pre><code>singularity build --remote tools/singularity/image.sif tools/singularity/image.def\n</code></pre> <p>then, to install uDALES use:</p> <pre><code># udales_build.sh &lt;NPROC&gt; [Debug, Release]\n./tools/singularity/udales_build.sh 2 Release\n</code></pre> <p>Finally, to run an example case use:</p> <pre><code># udales_run.sh &lt;NPROC&gt; &lt;BUILD_TYPE&gt; &lt;PATH_TO_CASE&gt; &lt;NAMELIST&gt;\n./tools/singularity/udales_run.sh 2 Release examples/001 namoptions.001\n</code></pre> <p>If you are looking to run the build and run commands on HPC, we have provided a sample script under <code>tools/singularity/udales_pbs_submit.sh</code>, you can modify and run it with <code>qsub tools/singularity/udales_pbs_submit.sh</code>.</p>"},{"location":"udales-getting-started/#prerequisites-when-not-using-singularity","title":"Prerequisites when not using Singularity","text":""},{"location":"udales-getting-started/#udales","title":"uDALES","text":"<p>uDALES is supported to run on Linux, macOS and Windows Subsystem for Linux (WSL). Please ensure that the latest version of the following libraries and software are available on your system:</p> <ul> <li>CMake &gt;= 3.9.</li> <li>NetCDF-Fortran &gt;= 4.</li> <li>GNU &lt;= 9, Intel, or Cray Fortran compiler.</li> <li>A recent version of MPICH or Open-MPI. </li> <li>FFTW </li> </ul>"},{"location":"udales-getting-started/#project-setup","title":"Project setup","text":"<p>This guide helps you set up a project template for uDALES with a generic folder structure set-up that you can later use to set up your own experiments. For this you also need:</p> <ul> <li>Git &gt;= 2.</li> <li>A GitHub account. (optional)</li> <li>Python &gt;= 3.6.</li> </ul>"},{"location":"udales-getting-started/#pre-processing","title":"Pre-processing","text":"<p>When you create your own experiments, you will need to set up specific input files. We have a system in place that does that for you, written in MATLAB. Information can be found under pre-processing and is not discussed in the getting-started set-up.</p> <ul> <li>MATLAB</li> </ul>"},{"location":"udales-getting-started/#post-processing","title":"Post-processing","text":"<p>For better organised netcdf output files, you will need:</p> <ul> <li>netCDF Operators (NCO).</li> </ul> <p>On local systems, these software and libraries (except MATLAB) should be available from your system's package manager (e.g. APT, yum, Homebrew, etc.) and examples on how to install all the required libraries for Linux/WSL and macOS are given below.</p> <p>On high performance computing (HPC) clusters, these software and libraries should have already been installed. Please refer to the specific documentation to load the above software and libraries. Alternatively, you can install all the required packages easily after installing Linuxbrew and using the instructions for macOS.</p>"},{"location":"udales-getting-started/#linuxwsl-ubuntu","title":"Linux/WSL (Ubuntu)","text":"<pre><code>sudo apt-get update &amp;&amp; sudo apt-get upgrade -y\nsudo apt-get install -y git cmake gfortran libopenmpi-dev openmpi-bin libnetcdf-dev libnetcdff-dev nco python3 python3-pip libfftw3-dev\n</code></pre>"},{"location":"udales-getting-started/#macos","title":"macOS","text":"<p>On macOS, use Homebrew to install the required libraries. If you do not have Homebrew installed on your system, install it from the Homebrew installation page then, to install all the required dependencies, including support for MPI, run the following commands from your terminal prompt:</p> <pre><code>brew update\nbrew install git cmake gcc netcdf netcdf-fortran mpich nco python3 fftw\n</code></pre>"},{"location":"udales-getting-started/#installation","title":"Installation","text":"<p>The installation and set-up of uDALES is straightforward thanks to the use of a Cookiecutter repository to create a project template for uDALES with a generic folder structure set-up that you can later use to set up your own experiments.</p> <p>Please make sure that you have created a new (private) repository on your GitHub account and made note of the URL as we need this later to configure Cookiecutter.</p>"},{"location":"udales-getting-started/#repository-set-up","title":"Repository set-up","text":"<p>First, install Cookiecutter from your command prompt:</p> <pre><code>python3 -m pip install --user cookiecutter\n</code></pre> <p>Then, to create a new uDALES project within the current working directory:</p> <pre><code>cookiecutter https://github.com/uDALES/cookiecutter-u-dales\n</code></pre> <p>and fill in the required fields when prompted. <code>&lt;PROJECT_NAME&gt;</code> is the name of the generated project directory and <code>&lt;GITHUB_PROJECT_REMOTE&gt;</code> is the URL to your remote GitHub account (this is optional, you can just press the return key to leave this empty). E.g.:</p> <pre><code>directory_name [&lt;PROJECT_NAME&gt;]: neutral_experiments\ngithub_project_remote [&lt;GITHUB_PROJECT_REMOTE&gt;]: https://github.com/&lt;MY_GITHUB_USERNAME&gt;/&lt;MY_NEW_EMPTY_REPO&gt;.git\n</code></pre> <p>This creates a Git repository for your own projects named <code>&lt;PROJECT_NAME&gt;</code> with the uDALES model development repository as submodule, and a generic tree that you can use to set up your own experiments:</p> <pre><code>.\n\u251c\u2500\u2500 data        # Contains or links to any external data used by the experiments.\n\u251c\u2500\u2500 docs        # Relevant documentation or papers used for the experiment.\n\u251c\u2500\u2500 experiments # Configuration files grouped by experiment number.\n\u2502   \u2514\u2500\u2500 &lt;N&gt;     # Any configurations files needed by uDALES to run experiment &lt;N&gt;.\n\u2502   \u2514\u2500\u2500 ...\n\u251c\u2500\u2500 tools       # Additional or specialized tools other then the ones included with uDALES.\n\u2514\u2500\u2500 u-dales     # uDALES model development repository (submodule).\n</code></pre> <p>Alternatively, one can create this folder structure manually, and clone the repository into the top-level directory: <pre><code>git clone --recurse-submodules https://github.com/uDALES/u-dales\n</code></pre></p> <p>In the next steps we will assume your current working directory is the top-level project directory.</p>"},{"location":"udales-getting-started/#build-on-common-systems","title":"Build on common systems","text":"<p>On standard systems and configurations, you can build uDALES with the following commands:</p> <pre><code># We assume you are running the following commands from your\n# top-level project directory.\n\nmkdir -p u-dales/build/release # in case you want to later create a build/debug\npushd u-dales/build/release\ncmake -LA ../..\nmake\npopd\n</code></pre> <p>You can compile in parallel mode by passing Make the <code>j</code> flag followed by the number of CPU cores to use. For example, to compile with 2 cores do <code>make -j2</code>.</p>"},{"location":"udales-getting-started/#build-on-hpcs","title":"Build on HPCs","text":"<p>To compile uDALES (in release mode) on the ICL cluster use: <pre><code>./u-dales/tools/hpc_build icl release\n</code></pre></p> <p>To compile uDALES (in release mode) on ARCHER2, use: <pre><code>./u-dales/tools/hpc_build archer release\n</code></pre></p> <p>Information for developers: if you are a High Performance Cluster (HPC) user you are likely using the Environment Modules package for the dynamic modification of the user's environment via modulefiles and therefore you may need to hint CMake the PATH to NetCDF (see below how).</p> <p>Here we show how to compile uDALES using the HPC at ICL as an example, therefore please note that the specific names/versions installed on your system may be different.</p> <pre><code>module list # list currently enabled modules -- should be empty!\nmodule avail # list available modules\n</code></pre> <pre><code># This is an example, please check with the previous command for the exact name of the\n# modules available on your system. This will load NetCDF compiled with Intel Suite\n# 2019.4 and add the correct version of icc and ifort to the PATH.\nmodule load intel-suite/2017.6 mpi/intel-2018 cmake/3.14.0 git/2.14.3\n</code></pre> <p>Then, to build the uDALES executable, run the following commands:</p> <pre><code># We assume you are running the following commands from your\n# top-level project directory.\n\nmkdir -p u-dales/build/release\npushd u-dales/build/release\nFC=mpiifort cmake -DNETCDF_DIR=/apps/netcdf/4.4.1-c -DNETCDF_FORTRAN_DIR=/apps/netcdf/4.4.4-fortran -LA ../..\nmake\npopd\n</code></pre> <p>where <code>NETCDF_DIR</code> and <code>NETCDF_FORTRAN_DIR</code> indicates the absolute path to your NetCDF-C and NetCDF-Fortran installation directories. Here, we use the utilities <code>nc-config</code> and <code>nf-config</code> to hint CMake the location of NetCDF, but you can simply pass the absolute path to the NetCDF-C and NetCDF-Fortran manually instead. You can compile in parallel mode by passing Make the <code>j</code> flag followed by the number of CPU cores to use. For example, to compile with 2 cores do <code>make -j2</code>.</p>"},{"location":"udales-getting-started/#build-defaultsoptions","title":"Build defaults/options","text":"<p>By default uDALES will compile in <code>Release</code> mode. You can change this by specifying the option (or flag) at configure time. The general syntax for specifying an option in CMake is <code>-D&lt;flag_name&gt;=&lt;flag_value&gt;</code> where <code>&lt;flag_name&gt;</code> is the option/flag name and <code>&lt;flag_value&gt;</code> is the option/flag value. The following options can be specified when configuring uDALES:</p> Name Options Default Description <code>CMAKE_BUILD_TYPE</code> <code>Release</code>, <code>Debug</code> <code>Release</code> Whether to optimise/build with debug flags <code>NETCDF4_DIR</code> <code>&lt;path&gt;</code> - Path to NetCDF-C installation directory <code>NETCDF_FORTRAN_DIR</code> <code>&lt;path&gt;</code> - Path to NetCDF-Fortran installation directory <code>SKIP_UPDATE_EXTERNAL_PROJECTS</code> <code>ON</code>, <code>OFF</code> <code>OFF</code> Whether to skip updating external projects"},{"location":"udales-getting-started/#set-up","title":"Set-up","text":"<p>To set up a new simulation, <code>copy_inputs.sh</code> in <code>u-dales/tools/</code> is used to create a new simulation setup <code>new_exp_id</code> based on another simulation <code>old_exp_id</code>. All <code>exp_ids</code> are three digit numbers, e.g. 001, and are stored in directories of that name. Scripts requires several variables to be set up. You can do this by copying and pasting the snippet below or by including it in a bash script (or bash profile if you are unlikely to change them).</p> <pre><code># We assume you are running the following commands from your\n# top-level project directory.\n\nexport DA_EXPDIR=$(pwd)/experiments #  The top-level directory of the simulation setups.\nexport DA_WORKDIR=$(pwd)/outputs # Output top-level directory\n\n# If source directories (DA_EXPDIR_SRC, DA_WORKDIR_SRC) are not set,\n# the experiment set-up folder will be copied from the same target directory.\n# I.e. DA_EXPDIR_SRC==DA_EXPDIR and DA_WORKDIR_SRC==DA_WORKDIR.\nexport DA_EXPDIR_SRC=$(pwd)/u-dales/examples\nexport DA_WORKDIR_SRC=$(pwd)/u-dales/examples\n</code></pre> <p>If you set up a new experiment on HPC, also use:</p> <pre><code>export DA_WORKDIR=$EPHEMERAL # Output top-level directory on HPC\nexport DA_WORKDIR_SRC=$EPHEMERAL\n</code></pre> <p>Now to set-up a new experiment (here we use case <code>009</code>) based on a previous example (here we use case <code>001</code>), run:</p> <pre><code># We assume you are running the following commands from your\n# top-level project directory.\n\n# General syntax: copy_inputs.sh new_exp_id old_exp_id\n# To set up a new simulation starting from the restart files of another simulation\n# (\"warmstart\"), use the 'w' flag. E.g.: copy_inputs.sh new_exp_id old_exp_id w\n./u-dales/tools/copy_inputs.sh 009 001\n</code></pre>"},{"location":"udales-getting-started/#run","title":"Run","text":"<p>The scripts <code>local_execute.sh</code> (for local machines), <code>hpc_execute.sh</code> (for ICL cluster) and <code>archer_execute.sh</code> (for ARCHER2) in <code>u-dales/tools</code> are used as wrappers to run simulations. These scripts contain several helpers to run the simulations and merge outputs from several CPUs into a single file (see Post-processing for more info about the individual scripts).</p> <p>The scripts require several variables to be set up. Below is an example setup for copying and pasting. You can also specify these parameters in a <code>config.sh</code> file within the experiment directory, which is then read by the scripts.</p> <p>Note that you need to choose the number of CPUs you are using to run the simulation such that the number of grid cells in the y-direction (<code>jtot</code> parameter in the <code>namoptions</code> input file) is a multiple of the number of CPUs.</p>"},{"location":"udales-getting-started/#run-on-common-systems","title":"Run on common systems","text":"<pre><code># We assume you are running the following commands from your\n# top-level project directory.\n\nexport DA_TOOLSDIR=$(pwd)/u-dales/tools # Directory of scripts\nexport DA_BUILD=$(pwd)/u-dales/build/release/u-dales # Build file\nexport NCPU=2 # Number of CPUs to use for a simulation\nexport DA_WORKDIR=$(pwd)/outputs # Output top-level directory\n</code></pre> <p>Then, to start the simulation, run:</p> <pre><code># We assume you are running the following commands from your\n# top-level project directory.\n\n# General syntax: local_execute.sh exp_directory\n./u-dales/tools/local_execute.sh experiments/009\n</code></pre>"},{"location":"udales-getting-started/#run-on-icl-cluster","title":"Run on ICL cluster","text":"<pre><code>export DA_TOOLSDIR=$(pwd)/u-dales/tools # Directory of scripts\nexport DA_BUILD=$(pwd)/u-dales/build/release/u-dales # Build file\nexport NCPU=24 # Number of CPUs to use for a simulation\nexport NNODE=1 # Number of nodes to use for a simulation\nexport WALLTIME=\"00:30:00\" # Maximum runtime for simulation in hours:minutes:seconds\nexport MEM=\"128gb\" # Memory request per node\n</code></pre> <p>For guidance on how to set the parameters on HPC, have a look at Job sizing guidance. Then, to start the simulation, run:</p> <pre><code># We assume you are running the following commands from your\n# top-level project directory.\n\n# General syntax: hpc_execute.sh exp_directory\n./u-dales/tools/hpc_execute.sh experiments/009\n</code></pre>"},{"location":"udales-getting-started/#run-on-archer2","title":"Run on ARCHER2","text":"<pre><code>export DA_TOOLSDIR=$(pwd)/u-dales/tools # Directory of scripts\nexport DA_BUILD=$(pwd)/u-dales/build/release/u-dales # Build file\nexport NCPU=128 # Number of CPUs to use for a simulation\nexport NNODE=1 # Number of nodes to use for a simulation\nexport WALLTIME=\"24:00:00\" # Maximum runtime for simulation in hours:minutes:seconds\nexport MEM=\"256gb\" # Memory request per node\nexport QOS=\"standard\" # Queue\n</code></pre> <p>For guidance on how to set the parameters on ARCHER2, have a look at the ARCHER2 documentation. In particular, take care to edit the <code>archer_execute.sh</code> script so that the account corresponds to one you can use. Then, to start the simulation, run:</p> <pre><code># We assume you are running the following commands from your\n# top-level project directory.\n\n# General syntax: hpc_execute.sh exp_directory\n./u-dales/tools/archer_execute.sh experiments/009\n</code></pre>"},{"location":"udales-getting-started/#whats-next","title":"What's next?","text":"<p>This simple guide is meant to allow you to get started based on an existing example. We set up several example simulations to get you started. To learn more about pre- and post-processing steps in uDALES, please see the pre-processing and post-processing pages.</p>"},{"location":"udales-how-to-cite/","title":"How to cite","text":"<p>When using the uDALES please cite as:</p> <p>Grylls, T., Suter, I., S\u00fctzl, B., Owens, S., Meyer, D., &amp; van Reeuwijk, M. (2021). uDALES: large-eddy-simulation software for urban flow, dispersion, and microclimate modelling. Journal of Open Source Software, 6(63), 3055, https://doi.org/10.21105/joss.03055</p> <pre><code>@article{Grylls2021,\n  doi = {10.21105/joss.03055},\n  url = {https://doi.org/10.21105/joss.03055},\n  year = {2021},\n  publisher = {The Open Journal},\n  volume = {6},\n  number = {63},\n  pages = {3055},\n  author = {Tom Grylls and Ivo Suter and Birgit S. S\u00fctzl and Sam Owens and David Meyer and Maarten van Reeuwijk},\n  title = {uDALES: large-eddy-simulation software for urban flow, dispersion, and microclimate modelling},\n  journal = {Journal of Open Source Software}\n}\n</code></pre> <p>If you are looking to also cite a specific version of the software, you can find correposding version-specific DOIs on Zenodo.</p>"},{"location":"udales-namoptions-overview/","title":"Namoptions overview","text":"<p>This list refers to the original code-base DALES. The latest version of the namoptions overview of DALES is documented here.</p>"},{"location":"udales-namoptions-overview/#namelist-domain","title":"Namelist DOMAIN","text":"Name Default Possible values Description Unit itot 64 Number of points in x-direction (imax in uDALES v1). jtot 64 Number of points in y-direction. ktot 96 Number of points in z-direction (kmax in uDALES v1). xlen -1 Domain size in x-direction (xsize in uDALES v1). ylen -1 Domain size in x-direction (ysize in uDALES v1)."},{"location":"udales-namoptions-overview/#namelist-dynamics","title":"Namelist DYNAMICS","text":"<p>Possible advection schemes:</p> <p>1 = 1<sup>st</sup> order upwind scheme</p> <p>2 = 2<sup>nd</sup> order central difference scheme</p> <p>7 = Kappa (flux limited) scheme. This scheme designed for quantities that should never become negative.</p> Name Default Possible values Description Unit lqlnr .false. See DALES. Default switched from .true. iadv_mom 2 2 Advection scheme for momentum. Also in DALES. - iadv_tke -1 2 Advection scheme for TKE. Only used if <code>loneeqn = True</code>. Also in DALES. - iadv_thl -1 2, 7 Advection scheme for temperature. Also in DALES. - iadv_qt -1 2 Advection scheme for moisture. Also in DALES. - iadv_sv -1 1, 2, 7 Advection scheme for scalars. Also in DALES. - ipoiss 0 0 Poisson solver. 0 = Fast Fourier Transform. -"},{"location":"udales-namoptions-overview/#namelist-physics","title":"Namelist PHYSICS","text":"Name Default Possible values Description Unit ps -1 See DALES. lcoriol .false. .true., .false. See DALES. Default switched to .false. - igrw_damp 2 See DALES. lmoist .false. .true., .false. See DALES. Default switched to .false. - ltempeq .false. .true., .false. Switch for solving temperature equation. - lbuoyancy .false. .true., .false. Switch for buoyancy force in temperature equation. - lprofforc .false. .true., .false. Switch for nudging flow to a profile (forcing). - luoutflowr .false. .true., .false. Switch that determines whether u-velocity is corrected to get a fixed outflow rate. Only functional when x-direction is not parellelised. lvoutflowr .false. .true., .false. Switch that determines whether u-velocity is corrected to get a fixed outflow rate. Only functional when y-direction is not parellelised. luvolflowr .false. .true., .false. Switch that determines whether u-velocity is corrected to get a fixed volume flow rate lvvolflowr .false. .true., .false. Switch that determines whether u-velocity is corrected to get a fixed volume flow rate uflowrate 1. <code>REAL</code> U-velocity flow rate for out- or volume-flow forcing. m/s vflowrate 1. <code>REAL</code> V-velocity flow rate out- or volume-flow forcing. m/s ifixuinf 0 1, 2 Choice for free stream forcing. (0 = nothing) lvinf .false. .true., .false. Use Vinf instead of Uinf for the fixed velocity at infinity tscale Timescale: domain height*Uinf/utau**2 lnudge .false. .true., .false. Switch for nudging flow to profiles (in <code>prof.inp.xxx</code>) nnudge 0 <code>INTEGER</code> Number of points from bottom to nudge. tnudge 60. <code>REAL</code> Time scale for nudging dpdx 0. Constant pressure gradient forcing in x. ltimedepsurf .false. .true., .false. Switch for time-dependent surface heat flux (<code>bctfz</code> etc - see BC section) ntimedepsurf 0 <code>REAL</code> Number of time-dependent surface heat fluxes in file <code>timedepsurf.inp.xxx</code> ltimedepnudge .false. .true., .false. Switch for time-dependent profiles. When <code>lnudge = .true.</code>, then this switch causes the nudging profile to vary in time. If using inflow-outflow boundary conditions with inflow given by profile (<code>BCxm/BCxT/BCxq = 2</code>), then the inflow profile varies in time. ntimedepnudge 0 <code>REAL</code> Number of time-dependent nudging profiles in file <code>timedepnudge.inp.xxx</code> ltimedepsw .false. .true., .false. Time-dependent shortwave radiation on facets ntimedepsw 0 <code>REAL</code> Number of time-dependent shortwave radiative fluxes in file <code>timedepsw.inp.xxx</code> ltimedeplw .false. .true., .false. Time-dependent longwave radiation on facets ntimedeplw 0 <code>REAL</code> Number of time-dependent shortwave radiative fluxes in file <code>timedeplw.inp.xxx</code>"},{"location":"udales-namoptions-overview/#namelist-run","title":"Namelist RUN","text":"Name Default Possible values Description Unit iexpnr 0 See DALES. runtime 300 See DALES. dtmax 20 See DALES. lwarmstart .false. See DALES. startfile '' See DALES. trestart 10000. See DALES. irandom 0 See DALES. krand See DALES. Setting no value will return kmax. randu 0. See DALES. Default changed from 0.5 randthl 0. See DALES. Default changed from 0.1 randqt 0. See DALES. Default changed from 1e-5. ladaptive .false. See DALES. courant -1 Default sets it to 1.5 or 1.1 (if Kappa or upwind scheme is used). These are different values than in DALES. author '' See DALES. lles .true. .true., .false. Switch that determines whether the subgrid model is turned on or constant ekm and ekh are used (DNS) - libm .true. Switch that determines whether the Immersed Boundary Method is turned on. lrandomize .true. Switch that determines whether initial field is randomised. Currently not independent of domain decomposition."},{"location":"udales-namoptions-overview/#namelist-output","title":"Namelist OUTPUT","text":"Name Default Possible values Description Unit lfielddump .false. .true., .false. Switch for instantaneous field output. - tfielddump 10000. Output time for fields. s fieldvars '' Any of the given labels, several are seperated by a comma: u0,v0,w0,th,ql,qt,p0,s1,s2,s3,s4,s5 Variable names of fields. - tsample 5. Sample time for statistics. s tstatsdump 10000. Output time for statistics. s ltdump .false. .true., .false. Switch to output time-averaged statistics. - lydump .false. .true., .false. Switch to output y-averaged statistics. Only functional if x-direction is not parallelised. - lytdump .false. .true., .false. Switch to output y- and time- averaged statistics. Only functional if x-direction is not parallelised. - lxydump .false. .true., .false. Switch to output x- and y- averaged statistics. - lxytdump .false. .true., .false. Switch to output x-, y- and time-averaged statistics. - lslicedump .false. .true., .false. Switch to output slices in the xy-plane. - ltkedump .false. .true., .false. Not supported in the current version. -"},{"location":"udales-namoptions-overview/#namelist-namsubgrid","title":"Namelist NAMSUBGRID","text":"Name Default Possible values Description Unit lvreman .false. .true., .false. Switch for Vreman (2004) sub-grid scheme. - c_vreman 0.07 Model constant for Vreman scheme. lbuoycorr .false. .true., .false. Switch for buoyancy correlation in the Vreman scheme. - loneeqn .false. .true., .false. Switch for one-equation sub-grid scheme. - ldelta .false. See DALES. lmason .false. See DALES. cf 2.5 See DALES. cn 0.76 See DALES. Rigc 0.25 See DALES. Prandtl 0.333 See DALES. lsmagorinsky .false . See DALES. cs -1 See DALES. nmason 2 See DALES."},{"location":"udales-namoptions-overview/#namelist-namchecksim","title":"Namelist NAMCHECKSIM","text":"Name Default Possible values Description Unit tcheck 0 See DALES."},{"location":"udales-namoptions-overview/#namelist-bc","title":"Namelist BC","text":"<p>Switches for boundary conditions: momentum (m), temperature (T), humidity (q) and scalars (s).</p> <p>Lateral BCs (BCx, BCy): 1 = periodic, 2 in/outflow conditions, inflow given by profile (usually constant), 3: in/outflow conditions, inflow given by precursor simulation.</p> <p>BCs at the top (BCtop): 1 = freeslip, 2 = noslip, 3 = should be used with inflow/outflow conditions.</p> <p>BCs at the bottom (BCbot; only effective if not covered with ground facets): 1 = flux, 2 = wall function, 3 = neutral wall function.</p> Name Default Possible values Description Unit BCxm 1 1,2,3 Domain boundary condition for momentum in x. BCxT 1 1,2,3 Domain boundary condition for temperature in x. BCxq 1 1,2,3 Domain boundary condition for humidity in x. BCxs 1 1,2,3 Domain boundary condition for scalars in x. BCym 1 1,2 Domain boundary condition for momentum in y. BCyT 1 1,2 Domain boundary condition for temperature in y. BCyq 1 1,2 Domain boundary condition for humidity in y. BCys 1 1,2 Domain boundary condition for scalars in y. BCtopm 1 1,2,3 Boundary condition for momentum at domain top. BCtopT 1 1,2 Boundary condition for temperature at domain top. BCtopq 1 1,2 Boundary condition for humidity at domain top. BCtops 1 1,2 Boundary condition for scalars at domain top. bctfxm 0 <code>REAL</code> Temperature flux on facets with surface normal in -x direction. bctfxp 0 <code>REAL</code> Temperature flux on facets with surface normal in +x direction. bctfym 0 <code>REAL</code> Temperature flux on facets with surface normal in -y direction. bctfyp 0 <code>REAL</code> Temperature flux on facets with surface normal in +y direction. bctfz 0 <code>REAL</code> Temperature flux on facets with surface normal in +z direction. bcqfxm 0 <code>REAL</code> Moisture flux on facets with surface normal in -x direction. bcqfxp 0 <code>REAL</code> Moisture flux on facets with surface normal in +x direction. bcqfym 0 <code>REAL</code> Moisture flux on facets with surface normal in -y direction. bcqfyp 0 <code>REAL</code> Moisture flux on facets with surface normal in +y direction. bcqfz 0 <code>REAL</code> Moisture flux on facets with surface normal in +z direction. thl_top -1. Temperature at the top boundary. qt_top -1. Humidity at the top boundary. wttop 0. Temperature flux at the top boundary. wsvtopdum Scalar boundary conditions top. BCbotm 2 1,2,3 Boundary condition for momentum at domain bottom (if <code>lbottom = .true.</code>). BCbotT 1 1,2 Boundary condition for temperature at domain bottom (if <code>lbottom = .true.</code>). BCbotq 1 1 Boundary condition for humidity at domain bottom (if <code>lbottom = .true.</code>). BCbots 1 1 Boundary condition for scalars at domain bottom (if <code>lbottom = .true.</code>). wtsurf -1. Temperature flux at domain bottom (if <code>lbottom = .true.</code>). Currently need to be set to reasonable values for subroutine bottom. wqsurf -1. Moisture flux at domain bottom (if <code>lbottom = .true.</code>). Currently need to be set to reasonable values for subroutine bottom. wsvsurfdum Scalar flux at domain bottom (if <code>lbottom = .true.</code>). thls -1. Temperature at domain bottom (if <code>lbottom = .true.</code>). Currently need to be set to reasonable values for subroutine bottom. qts -1. Moisture at domain bottom (if <code>lbottom = .true.</code>). Used in modthermodynamics to get a BC for the moisture profile. z0 -1. Momentum roughness length of the domain bottom (if <code>lbottom = .true.</code>). Currently need to be set to reasonable values for subroutine bottom. z0h -1. Heat roughness length of the domain bottom (if <code>lbottom = .true.</code>). Currently need to be set to reasonable values for subroutine bottom."},{"location":"udales-namoptions-overview/#namelist-energybalance","title":"Namelist ENERGYBALANCE","text":"Name Default Possible values Description Unit lEB .false. .true., .false. Switch for using the facet energy balance. - lwriteEBfiles .false. .true., .false. Switch for writing facet temperatures and energy budget to file. - lconstW .false. .true., .false. Switch whether soil moisture is assumed as constant in time (.true.) or the evaporated water is from the soil (.false.). - dtEB 10. <code>REAL</code> Time interval between calculations of facet energy balance. s bldT 0. <code>REAL</code> Internal temperature of the buildings. K flrT 0. <code>REAL</code> Internal temperature of the ground. K wsoil 0. <code>REAL</code> Water content of soil. kg/m3 wgrmax 450. <code>REAL</code> Maximum water content. kg/m3 wwilt 171. <code>REAL</code> Water content at wilting point. kg/m3 wfc 313. <code>REAL</code> Water content at field capacity. kg/m3 skyLW 0. <code>REAL</code> Long-wave radiation from the sky. GRLAI 2. <code>REAL</code> Leaf area index of a green roof. rsmin 110. <code>REAL</code> Minimum resistance of soil/plant. nfaclyrs 3 <code>INTEGER</code> Number of layers making up each facet (nwalllayers in uDALES v1). lvfsparse .false. .true., .false. Switch for view factors in sparse (text) format. nnz 0 <code>INTEGER</code> Number of non-zero view factors (only used with sparse view factor format"},{"location":"udales-namoptions-overview/#namelist-walls","title":"Namelist WALLS","text":"<p>1 = fixed flux</p> <p>2 = flux determined by wall function involving temperature</p> <p>3 = flux determined by neutral wall function (set automatically if <code>ltempeq = .false.</code>)</p> Name Default Possible values Description Unit nblocks 0 <code>INTEGER</code> Number of blocks specified in <code>blocks.inp</code>. - nfcts -1 <code>INTEGER</code> Number of facets specified in <code>facets.inp</code>. - iwallmom 2 1, 2, 3 (1 means zero flux) Building wall momentum flux. - iwalltemp 1 1, 2 Building wall temperature flux. - iwallmoist 1 1, 2 Building wall moisture flux. - iwallscal 1 1, 2 Building wall scalar flux - lbottom .false. .true., .false. Switch for using wall function as bottom BC. Used only if no ground facets. - nsolpts_u 0 <code>INTEGER</code> Number of solid points on u-grid. - nsolpts_v 0 <code>INTEGER</code> Number of solid points on v-grid. - nsolpts_w 0 <code>INTEGER</code> Number of solid points on w-grid. - nsolpts_c 0 <code>INTEGER</code> Number of solid points on c-grid. - nbndpts_u 0 <code>INTEGER</code> Number of fluid boundary points on u-grid. - nbndpts_v 0 <code>INTEGER</code> Number of fluid boundary points on v-grid. - nbndpts_w 0 <code>INTEGER</code> Number of fluid boundary points on w-grid. - nbndpts_c 0 <code>INTEGER</code> Number of fluid boundary points on c-grid. - nfctsecs_u 0 <code>INTEGER</code> Number of facet sections on u-grid. - nfctsecs_v 0 <code>INTEGER</code> Number of facet sections on v-grid. - nfctsecs_w 0 <code>INTEGER</code> Number of facet sections on w-grid. - nfctsecs_c 0 <code>INTEGER</code> Number of facet sections on c-grid. - lnorec .false. .true., .false. Switch for not using reconstruction. -"},{"location":"udales-namoptions-overview/#namelist-scalars","title":"Namelist SCALARS","text":"Name Default Possible values Description Unit nsv 0 See DALES. lreadscal .false. .true., .false. Switch for reading scalar pollutant field (warm start). Deprecated, will be removed in the future. - lscasrcr .false. .true., .false. Switch for 2-D network of point sources at lowest level as defined in scals.inp.xxx. - lscasrcl .false. .true., .false. Switch for passive scalar line source when using canyon geometry. - lscasrc .false. .true., .false. Switch for passive scalar point source defined by xS,yS,zS,SS,sigS. - xS 0 <code>REAL</code> Position of scalar source in x. m yS 0 <code>REAL</code> Position of scalar source in y. m zS 0 <code>REAL</code> Position of scalar source in z. m SS 0. <code>REAL</code> Strength of scalar source. g/ms sigS 0. <code>REAL</code> Standard deviation of scalar source. m"},{"location":"udales-namoptions-overview/#namelist-driver","title":"Namelist DRIVER","text":"Name Default Possible values Description Unit idriver 0 0, 1, 2 Options for running precursor driver simulations where *driver* files will be written (<code>= 1</code>) and reading a completed driver simulation as the inlet to a simulation (<code>= 2</code>). Default (<code>= 0</code>) will do neither. - tdriverstart 0. <code>REAL</code> Time at which *driver* files start being written. In use for <code>idriver = 1</code>. s dtdriver 0. <code>REAL</code> Timestep at which *driver* file planes are written. In use for <code>idriver = 1</code>. s iplane - <code>INTEGER</code> Index of the position on the x-axis of the plane that will be written to *driver* files. In use for <code>idriver = 1</code>. driverstore 0. <code>INTEGER</code> Number of timesteps (<code>idriver = 1</code>) to be written to *driver* files or (<code>idriver = 2</code>) contained in *driver* files to be read. - driverjobnr - - Job number of the *driver* files to be read. These files should be copied into the experiments folder of the driven simulation. In use for <code>idriver = 2</code>. - lsdriver .false. .true., .false. Switch for reading scalar driver files. In use for <code>idriver = 2</code>. -"},{"location":"udales-namoptions-overview/#namelist-chemistry","title":"Namelist CHEMISTRY","text":"<p>This section will be updated with the next version.</p> Name Default Possible values Description Unit lchem .false. .true., .false. Switch for basic chemistry. - k1 0. Rate constant (O3 + NO -&gt; NO2 + 02 ). Chemistry model parameter. JNO2 0. NO2 photolysis rate. Chemistry model parameter."},{"location":"udales-namoptions-overview/#namelist-inlet","title":"Namelist INLET","text":"Name Default Possible values Description Unit Uinf 0. <code>REAL</code> Fixed velocity at domain top (x-direction). m/s Vinf 0. <code>REAL</code> Fixed velocity at domain top (y-direction). m/s"},{"location":"udales-post-processing/","title":"Post-processing","text":"<p>uDALES saves the outputs as NetCDF files. If a simulation is run on several processors, each processor writes independent output files. The script <code>nco_concatenate_field.sh</code> in the <code>tools</code> directory can be used to gather these output files into a single file. The wrapper script <code>gather_outputs.sh</code> does this automatically for all output fields of the simulation. The script is automatically called after a simulation run when using <code>local_execute.sh</code> or <code>hpc_execute.sh</code> for executing your simulation.</p> <p>If you have separate output files of a continuous simulation, e.g. because one simulation is the warmstart of the other simulation, you can append these output files into a single file using the script <code>append_outputs.sh</code>.</p>"},{"location":"udales-post-processing/#gather-output-fields","title":"Gather output fields","text":"<p>To gather the output files of serveral processors from your simulation to a single file, use:</p> <pre><code># We assume you are running the following commands from your\n# top-level project directory.\n\n# General syntax: gather_outputs.sh &lt;path-to-exp-outputs&gt;\n./u-dales/tools/gather_outputs.sh outputs/009\n</code></pre> <p>Replace 009 with the number of your simulation.</p>"},{"location":"udales-post-processing/#append-two-output-files","title":"Append two output files","text":"<p>We assume that simulation 1 was run before simulation 2, i.e. the time steps of simulation 1 are all before simulation 2. To append the output files of simulation 1 (009) to simulation 2 (010), use:</p> <pre><code># We assume you are running the following commands from your\n# top-level project directory.\n\n# General syntax: append_outputs.sh &lt;path-to-simulation-1-outputs&gt; &lt;path-to-simulation-2-outputs&gt;\n./u-dales/tools/append_outputs.sh outputs/009 outputs/010\n</code></pre> <p>Replace 009 and 010 with the numbers of your simulations.</p>"},{"location":"udales-post-processing/#different-output-files-explained","title":"Different output files explained","text":"<p>The output files generated depend on the parameters specified under <code>&amp;OUPUT</code> in the <code>namoptions</code> file of your simulation (see Configuration for details), and the name of the output file(s) matches the name of that switch, e.g. if <code>lxytdump</code> is selected for experiment <code>009</code> then there will be an output file called <code>xytdump.009.nc</code>. If <code>lfielddump</code> is selected, note that there will be a <code>fielddump.xxx.009.nc</code> file for each cpu.</p>"},{"location":"udales-post-processing/#reading-output-files","title":"Reading output files","text":"<p>These output files are in netcdf format, and so it is possible to obtain a description of any particular file using the command <code>ncdisp('&lt;top-level-directory&gt;/outputs/009/xytdump.009.nc')</code> in Matlab. To read a variable, one can use e.g. <code>u = ncread(&lt;top-level-directory&gt;/outputs/009/xytdump.009.nc', 'uxyt')</code></p>"},{"location":"udales-pre-processing/","title":"Pre-processing","text":"<p>This guide explains how to set up the input files of your simulation. The idea is that you already have a simulation set up, and now you want to modify some of the parameters of your simulation. If you do not have a simulation yet, have a look at the set-up section in our getting started guide.</p> <p>The parameters of the simulation are set in the <code>namoptions</code> file of your experiment. Some parameter changes require the additional input files to be re-written, which will be done automatically by the pre-processing. The next section provides an overview of these parameters.</p>"},{"location":"udales-pre-processing/#pre-processing-parameters","title":"Pre-processing parameters","text":"<p>Some parameters used by uDALES are also used in the pre-processing. They are the following:</p>"},{"location":"udales-pre-processing/#run","title":"<code>&amp;RUN</code>","text":"<ul> <li><code>runtime</code>: Length of simulation period (in seconds). This is used with time-varying solar position (see below).</li> </ul>"},{"location":"udales-pre-processing/#domain","title":"<code>&amp;DOMAIN</code>","text":"<ul> <li><code>itot</code>: number of cells in x-direction. Default: 64.</li> <li><code>jtot</code>: number of cells in y-direction. Default: 64.</li> <li><code>ktot</code>: number of cells in z-direction. Default: 96.</li> <li><code>xlen</code>: domain size in x-direction (metres).</li> <li><code>ylen</code>: domain size in y-direction (metres).</li> </ul>"},{"location":"udales-pre-processing/#walls","title":"<code>&amp;WALLS</code>","text":"<p>This section describes the parameters used by the IBM. - <code>iwallmom</code>: Momentum flux boundary condition - 1:zero flux, 2: non-neutral wall function, 3: neutral wall function. - <code>iwalltemp</code>: Temperature flux boundary condition - 1: constant flux, 2: wall function. If either of these are true, then <code>Tfacinit.inp.xxx</code> is written using the value of <code>facT</code>.</p> <p>The following parameters are not used, but instead generated by the pre-processing routines and written to the file <code>info.txt</code> by the pre-processing script. They must be added to namoptions manually. - <code>nfcts</code>: number of facets. If using <code>write_inputs.sh</code> (see below), this will write its value into namoptions. Equal to the number of (non-header) lines in <code>facets.inp.xxx</code>. - <code>nsolpts_u</code>: number of solid points on the u-grid. Equal to the number of (non-header) lines in <code>solid_u.txt</code>. - <code>nsolpts_v</code>: number of solid points on the v-grid. Equal to the number of (non-header) lines in <code>solid_v.txt</code>. - <code>nsolpts_w</code>: number of solid points on the w-grid. Equal to the number of (non-header) lines in <code>solid_w.txt</code>. - <code>nsolpts_c</code>: number of solid points on the c-grid. Equal to the number of (non-header) lines in <code>solid_c.txt</code>. - <code>nsndpts_u</code>: number of fluid boundary points on the u-grid. Equal to the number of (non-header) lines in <code>fluid_boundary_u.txt</code>. - <code>nsndpts_v</code>: number of fluid boundary points on the v-grid. Equal to the number of (non-header) lines in <code>fluid_boundary_v.txt</code>. - <code>nsndpts_w</code>: number of fluid boundary points on the w-grid. Equal to the number of (non-header) lines in <code>fluid_boundary_w.txt</code>. - <code>nsndpts_c</code>: number of fluid boundary points on the c-grid. Equal to the number of (non-header) lines in <code>fluid_boundary_c.txt</code>. - <code>nfctsecs_u</code>: number of facet sections on the u-grid. Equal to the number of (non-header) lines in <code>facet_sections_u.txt</code>. - <code>nfctsecs_v</code>: number of facet sections on the v-grid. Equal to the number of (non-header) lines in <code>facet_sections_v.txt</code>. - <code>nfctsecs_w</code>: number of facet sections on the w-grid. Equal to the number of (non-header) lines in <code>facet_sections_w.txt</code>. - <code>nfctsecs_c</code>: number of facet sections on the c-grid. Equal to the number of (non-header) lines in <code>facet_sections_c.txt</code>.</p>"},{"location":"udales-pre-processing/#physics","title":"<code>&amp;PHYSICS</code>","text":"<ul> <li><code>luoutflowr</code>: switch that determines whether u-velocity is corrected to get a fixed outflow rate Default: false.</li> <li><code>lvoutflowr</code>: switch that determines whether v-velocity is corrected to get a fixed outflow rate. Default: false.</li> <li><code>luvolflowr</code>: switch that determines whether u-velocity is corrected to get a fixed volume flow rate. Default: false.</li> <li><code>lvvolflowr</code>: switch that determines whether v-velocity is corrected to get a fixed volume flow rate. Default: false.</li> <li><code>lcoriol</code>: switch for coriolis force. Default: false.</li> <li><code>lprofforc</code>: switch for nudging flow to a profile. Default: false.</li> </ul> <p>Note only one forcing should be specified, i.e. one of <code>luoutflowr</code>/<code>lvoutflowr</code>,<code>luvolflowr</code>/<code>lvvolflowr</code>, <code>lprofforc</code>, or <code>lcoriol</code>.</p>"},{"location":"udales-pre-processing/#energybalance","title":"<code>&amp;ENERGYBALANCE</code>","text":"<ul> <li><code>lEB</code>: switch for energy balance. Default: false.</li> <li><code>lvfsparse</code>: switch for view factors in sparse (text) format.</li> <li><code>nnz</code>: number of non-zero view factors when using sparse format - this needs to be written to namoptions after pre-processing.</li> <li><code>dtEB</code>: surface energy balance timestep.</li> </ul>"},{"location":"udales-pre-processing/#chemistry","title":"<code>&amp;CHEMISTRY</code>","text":"<ul> <li><code>lchem</code>: switch for chemistry.</li> </ul>"},{"location":"udales-pre-processing/#scalars","title":"<code>&amp;SCALARS</code>","text":"<ul> <li><code>nsv</code>: number of scalar variables. Default: 0. Note that <code>nsv &gt; 0</code> is not yet supported in the pre-processing.</li> </ul>"},{"location":"udales-pre-processing/#inps","title":"<code>&amp;INPS</code>","text":"<p>The parameters under the <code>&amp;INPS</code> header are used only in the pre-processing.</p> <ul> <li><code>zsize</code>: size of domain in z direction (metres).</li> <li><code>lzstretch</code>: switch for stretched z grid. Default: false.</li> <li><code>lstretchexp</code>: switch for z grid stretched using exp function. Default: false.</li> <li><code>lstretchtanh</code>: switch for z grid stretched using tanh function. Default: false.</li> <li><code>lstretch2tanh</code>: switch for z grid stretched using 2tanh function. Default: false.</li> <li><code>stretchconst</code>: stretch constant. Default: 0.01.</li> <li><code>u0</code>: initial u-velocity (m/s). Also applied as geostrophic term where applicable. Default: 0.</li> <li><code>v0</code>: initial v-velocity (m/s). Also applied as geostrophic term where applicable. Default: 0.</li> <li><code>dpdx</code>: pressure gradient in x direction (Pa/m). Default: 0.</li> <li><code>dpdy</code>: pressure gradient in y direction (Pa/m). Default: 0.</li> <li><code>thl0</code>: temperature at z = 0. Default: 288.</li> <li><code>qt0</code>: specific humidity at z = 0. Default: 0.</li> <li><code>lapse</code>: lapse rate (K/m). Default: 0.</li> <li><code>w_s</code>: subsidence. Default: 0.</li> <li><code>R</code>: radiative forcing (W/m^2). Default: 0.</li> <li><code>NOb</code>: initial concentration of NO. Default: 0.</li> <li><code>NO2b</code>: initial concentration of NO2b. Default: 0.</li> <li><code>O3b</code>: initial concentration of O3b. Default: 0.</li> </ul> <p>The following parameters are related to the immersed boundary method. - <code>stl_file</code>: Name of STL file defining the geometry. - <code>read_types</code>: Switch for reading facet types from file. Default: false (all facets are set to type 1). - <code>types_path</code>: Name of types file. - <code>facT</code>: if <code>iwallmom = 2</code> or  <code>iwalltemp = 2</code> then (constant) facet temperature, or if <code>lEB = .true.</code> then initial facet temperature. Default: 288. - <code>isolid_bound</code>: Option for classification of solid/fluid points, including boundary points. 1: In-house Fortran routine (default, fast), 2: equivalent MATLAB routine (useful for debugging), 3: inpolyhedron (MATLAB; provided for when option 1 &amp; 2 are not producing expected results): https://www.mathworks.com/matlabcentral/fileexchange/37856-inpolyhedron-are-points-inside-a-triangulated-volume. - <code>ifacsec</code>: Option for facet section calculation. 1: Fortran (default, fast), 2: MATLAB (useful for debugging).</p> <p>If using the energy balance, the following parameters can also be specified. - <code>ishortwave</code>: Option for shortwave radiation calculation. 1: Fortran (default, fast), 2:  MATLAB (useful for debugging). - <code>isolar</code>: Option for solar radiation (see below for futher detail). 1: custom (default), 2: from latitude &amp; longitude, 3: from weather file. - <code>view3d_out</code>: Output format for View3D: 0: text, 1: binary, 2: sparse (text). Default: 0. - <code>maxD</code>: Maximum distance to check view factors, otherwise they are zero. Default: Inf. - <code>xazimuth</code>: the azimuthal angle of the x-axis (with respect to North). Default : 90 degrees, i.e. East.</p> <p>If <code>isolar = 1</code>, then the solar radiation is determined by: - <code>solarazimuth</code>: solar azimuth (degrees). Default: 135. (solaz in uDALES v1). - <code>solarzenith</code>: solar zenith (degrees). Default: 28.4066. (Z in uDALES v1). - <code>I</code>: direct normal irradiance (DNI) (W/m^2). Default: 800. - <code>Dsky</code>: diffuse sky irradiance (W/m^2). Default: 418.8041. (Dsk in uDALES v1).</p> <p>If <code>isolar = 2</code>, then the solar position is calculated according to the NOAA solar position algorithm, and <code>I</code> and <code>Dsky</code> are determined by the ASHRAE clear-sky model, and the spacetime location is specified by: - <code>year</code>, e.g. 2023. - <code>month</code>, where e.g. 6 corresponds to June. - <code>day</code>, e.g. 21. - <code>hour</code>, where e.g. 0 corresponds to midnight and 23 corresponds to 11pm. Default: 6. - <code>minute</code>. Default: 0. - <code>second</code>. Default: 0. - <code>longitude</code>. Default: -0.13. - <code>latitude</code>. Default: 51.5. - <code>timezone</code>. Default: 0. - <code>elevation</code>. Default: 0.</p> <p>If <code>isolar = 3</code>, then the parameters are specified in a file containing weather data for a given year. - <code>weatherfname</code>: file name. - <code>month</code> - <code>day</code> - <code>hour</code>. Default: 0.</p> <p>The solar parameters can also be varied in time using the <code>ltimedepsw</code> switch. This occurs on a timescale <code>dtSP</code>, which is equal to <code>dtEB</code> by default.</p>"},{"location":"udales-pre-processing/#run_1","title":"Run","text":"<p>The MATLAB script <code>write_inputs.m</code> will write the necessary input files. The shell script <code>write_inputs.sh</code> is a wrapper around the MATLAB script, allowing it to be called from the command line. For more info about the functions see Developer's guide. The script requires several variables to be set up. Below is an example setup for copying and pasting. You can also specify these parameters in a <code>config.sh</code> file within the experiment directory, which is then read by the scripts.</p> <pre><code># We assume you are running the following commands from your\n# top-level project directory.\n\nexport DA_TOOLSDIR=$(pwd)/u-dales/tools # Directory of the scripts\nexport DA_EXPDIR=$(pwd)/experiments #  The top-level directory of the simulation setups\n</code></pre> <p>Then, to start the pre-processing, run:</p> <pre><code># We assume you are running the following commands from your\n# top-level project directory.\n\n# General syntax: write_inputs.sh exp_id\n./u-dales/tools/write_inputs.sh 001\n</code></pre> <p>Replace 001 with the number of your simulation.</p>"},{"location":"udales-pre-processing/#developers-guide","title":"Developer's guide","text":"<p>The <code>u-dales/tools/preprocessing.m</code> matlab class contains the functionality for preprocessing. The constructor reads the parameters in <code>namoptions</code> and stores them as member variables, and defines default variables for those not specified. These are then used in the member functions. In these member functions, additional data structures are also stored as member variables, including those used repeatedly and those eventually written to files, so that one can easily view and manipulate them using the matlab IDE.</p> <p>The <code>u-dales/tools/write_inputs.m</code> matlab script calls member functions of <code>preprocessing.m</code> in order to write the basic input files (those not relating to the IBM or SEB), followed by routines located in the <code>IBM</code> and <code>SEB</code> directories within the uDALES tools directory. It is intended to be as short and readable as possible, with the goal being that a developer can edit for a particular purpose. It will work simply as a normal script using the matlab IDE, but when doing this, ensure that <code>DA_EXPDIR = &lt;top level directory&gt;/experiments/</code> and <code>DA_TOOLSDIR = &lt;top level directory&gt;/u-dales/tools/</code> are defined.</p> <p>The <code>u-dales/tools/write_inputs.sh</code> shell script acts as a wrapper around <code>write_inputs.m</code>. Before running the matlab script, it will run the shell script <code>config.sh</code> located in the experiment directory, which defines environmental variables <code>DA_EXPDIR</code> and <code>DA_TOOLSDIR</code>. After running the script, it will also write the correct number of facets to <code>namoptions</code>. It is intended to be run from the top level project directory.</p>"},{"location":"udales-pre-processing/#input-files","title":"Input files","text":"<p>uDALES requires a number of input files, all suffixed by the experiment number, which is omitted in the following documentation. The <code>namoptions.inp</code> file contains a list of parameters for uDALES and the pre-processing routines, and the pre-processing is intended to run using solely this file (with some exceptions). The input files are:</p> <ul> <li><code>prof.inp</code>: initial profiles of flow variables (described in DALES documentation).</li> <li><code>lscale.inp</code>: large-scale forcings (described in DALES documentation).</li> <li><code>facets.inp</code>: column of facet types and three columns (x,y,z) of surface normal components (nfcts x 4).</li> <li><code>Tfacinit.inp</code>: list of initial facet temperatures (nfcts x 1).</li> <li><code>factypes.inp</code>: a description of the properties of different types of facet (described below). This is copied to the experiment directory automatically. Each row describes a wall type, with the first 6 columns being: wall type id, a boolean for whether it is a 'green' facet or not, momentum roughness length, heat roughness length, albedo, and emissivity. Assuming that each facet is composed of 3 layers, the next 3 columns give the thickness of each, the next 3 give the volumetric heat capacity, the next 3 give the heat conductivity, and the final 4 give the thermal diffusivity at each interface between the layers.</li> <li><code>scalar.inp</code>: if using scalars, the initial scalar profiles.</li> <li><code>timedepnudge.inp</code>: if using time-dependent nudging (described in DALES documentation).</li> <li><code>timedepsurf.inp</code>: if using time-dependent surface fluxes (described in DALES documentation).</li> </ul> <p>With the IBM, the following additional files are required: - <code>solid_u.txt</code>: Indices of solid points on u-grid (nsolpts_u x 3). - <code>solid_v.txt</code>: Indices of solid points on v-grid (nsolpts_v x 3). - <code>solid_w.txt</code>: Indices of solid points on w-grid (nsolpts_w x 3). - <code>solid_c.txt</code>: Indices of solid points on c-grid (nsolpts_c x 3). - <code>fluid_boundary_u.txt</code>: Indices of fluid boundary points on u-grid (nbndpts_u x 3). - <code>fluid_boundary_v.txt</code>: Indices of fluid boundary points on v-grid (nbndpts_v x 3). - <code>fluid_boundary_w.txt</code>: Indices of fluid boundary points on w-grid (nbndpts_w x 3). - <code>fluid_boundary_c.txt</code>: Indices of fluid boundary points on c-grid (nbndpts_c x 3). - <code>facet_sections_u.txt</code>: Indices of facet sections on u-grid (nfctsecs_u x 3). - <code>facet_sections_v.txt</code>: Indices of facet sections on v-grid (nfctsecs_v x 3). - <code>facet_sections_w.txt</code>: Indices of facet sections on w-grid (nfctsecs_w x 3). - <code>facet_sections_c.txt</code>: Indices of facet sections on c-grid (nfctsecs_c x 3).</p> <p>With the SEB, the following additional files are required: - <code>facetarea.inp</code>: list of areas of facets (nfcts x 1). - <code>vf.nc.inp</code> or <code>vfsparse.inp</code>: view factors stored in netcdf or sparse format respectively. - <code>svf.inp</code>: list of sky view factors of facets (nfcts x 1). - <code>netsw.inp</code>: list of net shortwave radiation on facets (nfcts x 1). If using time-dependent radiation on facets: - <code>timedepsw.inp</code>: shortwave - row of times (1 x ntimedepsw) followed by array of values (nfcts x ntimedepsw). - <code>timedeplw.inp</code>: longwave - columns for times and values (ntimedeplw x 2). This currently must be generated by a separate user-defined script.</p>"},{"location":"udales-pub-list/","title":"Publication list","text":"<p>The uDALES software was used in the following publications :</p> <ul> <li>Evaluation of an operational air quality model using large-eddy simulation<sup>1</sup>.</li> <li>Steady-state large-eddy simulations of convective and stable urban boundary layers<sup>2</sup>.</li> <li>Drag distribution in idealized heterogeneous urban environments<sup>3</sup>.</li> </ul>"},{"location":"udales-pub-list/#references","title":"References","text":"<ol> <li> <p>Tom Grylls, Cl\u00e9mence M.A. Le Cornec, Pietro Salizzoni, Lionel Soulhac, Marc E.J. Stettler, and Maarten van Reeuwijk. Evaluation of an operational air quality model using large-eddy simulation. Atmospheric Environment: X, 3:100041, 2019. doi:10.1016/j.aeaoa.2019.100041.\u00a0\u21a9</p> </li> <li> <p>Tom Grylls, Ivo Suter, and Maarten van Reeuwijk. Steady-state large-eddy simulations of convective and stable urban boundary layers. Boundary-Layer Meteorology, 175(3):309\u2013341, April 2020. doi:10.1007/s10546-020-00508-x.\u00a0\u21a9</p> </li> <li> <p>Birgit S. S\u00fctzl, Gabriel G. Rooney, and Maarten van Reeuwijk. Drag distribution in idealized heterogeneous urban environments. Boundary-Layer Meteorology, October 2020. doi:10.1007/s10546-020-00567-0.\u00a0\u21a9</p> </li> </ol>"},{"location":"udales-simulation-setup/","title":"Simulation setup","text":"<p>This document contains some notes on setting up uDALES simulations. A complete list of all parameters and switches is documented under Configuration.</p>"},{"location":"udales-simulation-setup/#table-of-contents","title":"Table of contents","text":"<ul> <li>Boundary Conditions</li> <li>Buildings and blocks</li> <li>Driver simulations</li> </ul>"},{"location":"udales-simulation-setup/#boundary-conditions","title":"Boundary Conditions","text":"<p>The boundary conditions for uDALES are specified under the <code>&amp;BC</code> header in <code>namoptions.inp</code>.</p>"},{"location":"udales-simulation-setup/#momentum","title":"Momentum","text":""},{"location":"udales-simulation-setup/#top","title":"Top","text":"<p>Determined by <code>BCtopm</code>. Possible values:</p> <ul> <li>1: free-slip, i.e. zero flux.</li> <li>2: no-slip, i.e. zero velocity.</li> <li>3: variable vertical velocity (necessary with inflow-outflow lateral boundary conditions).</li> </ul>"},{"location":"udales-simulation-setup/#bottom","title":"Bottom","text":"<p>NB: only relevant if the bottom of the domain is not covered by floor facets. Determined by <code>BCbotm</code>. Possible values:</p> <ul> <li>1: free slip, i.e. zero flux.</li> <li>2: flux given by wall function involving temperature.</li> <li>3: flux given by neutral wall function.</li> </ul>"},{"location":"udales-simulation-setup/#walls","title":"Walls","text":"<p>Determined by <code>iwallmom</code>. Possible values:</p> <ul> <li>1: free-slip, i.e. zero flux.</li> <li>2: flux given by wall function involving temperature.</li> <li>3: flux given by neutral wall function.</li> </ul>"},{"location":"udales-simulation-setup/#x","title":"x","text":"<p>Determined by <code>BCxm</code>. Possible values:</p> <ul> <li>1: periodic</li> <li>2: inflow-outflow, fixed profile</li> <li>3: inflow-outflow, inflow given by time-varying profile from precursor simulation</li> </ul>"},{"location":"udales-simulation-setup/#y","title":"y","text":"<p>Determined by <code>BCym</code>. Possible values:</p> <ul> <li>1: periodic</li> <li>2: inflow-outflow, fixed profile</li> </ul>"},{"location":"udales-simulation-setup/#temperature","title":"Temperature","text":"<p>Only required when <code>ltempeq = .true.</code></p>"},{"location":"udales-simulation-setup/#top_1","title":"Top","text":"<p>Determined by <code>BCtopT</code>. Possible values:</p> <ul> <li>1: constant flux given by <code>wttop</code>.</li> <li>2: constant temperature given by <code>thl_top</code>.</li> </ul>"},{"location":"udales-simulation-setup/#bottom_1","title":"Bottom","text":"<p>Determined by <code>BCbotT</code>. Possible values:</p> <ul> <li>1: constant flux given by <code>wtsurf</code>.</li> <li>2: flux given by wall function. Temperature of ghost cells below floor facets given by <code>thls</code>.</li> </ul>"},{"location":"udales-simulation-setup/#walls_1","title":"Walls","text":"<p>Determined by <code>iwalltemp</code>. Possible values:</p> <ul> <li>1: constant flux given by <code>bctfxm</code>/<code>bctfxp</code> for facets with normal in -/+ x-direction, <code>bctfym</code>/<code>bctfyp</code> for facets with normal in -/+ y-direction, and <code>bctfz</code> for facets with normal in +z direction.</li> <li>2: flux given by wall function.</li> </ul>"},{"location":"udales-simulation-setup/#moisture","title":"Moisture","text":"<p>Determined by <code>iwallmoist</code>. Possible values:</p> <ul> <li>1: constant flux given by <code>bcqfxm</code>/<code>bcqfxp</code> for facets with normal in -/+ x-direction, <code>bcqfym</code>/<code>bctfyp</code> for facets with normal in -/+ y-direction, and <code>bcqfz</code> for facets with normal in +z direction.</li> <li>2: flux given by wall function.</li> </ul>"},{"location":"udales-simulation-setup/#scalars","title":"Scalars","text":"<p>TBC</p>"},{"location":"udales-simulation-setup/#facets","title":"Facets","text":"<p>uDALES uses the immersed boundary method (IBM) to capture buildings in the fluid domain. This geometry is prescribed by an STL file, and this is used to generate the necessary input files for the IBM are generated using uDALES' pre-processing routines (see pre-processing). </p> <p>The <code>facets.inp.xxx</code> file indicates the the type (corresponding to a row of <code>factypes.inp.xxx</code> and therefore indicating the roughness length, heat capacity etc. of that surface) and its surface normal. Finally <code>Tfacinit.inp.xxx</code> indicates the initial temperature of each facet where applicable.</p>"},{"location":"udales-simulation-setup/#driver-simulations","title":"Driver simulations","text":"<p>The options for running precursor and driven simulations are specified under the <code>&amp;DRIVER</code> header in namoptions.xxx. This provides two model functionalities:</p> <p>1) To run a precursor simulation where instantaneous y-z planes at a specified index in the x-direction (<code>iplane</code>) are written every <code>dtdriver</code> seconds to output files (named *driver*). 2) To run a driven simulation where the inlet y-z plane (at <code>i=ib-1</code> and <code>i=ib</code>) is determined by reading the *driver* files of a precursor simulation that has already been run.</p>"},{"location":"udales-simulation-setup/#running-precursor-simulations","title":"Running precursor simulations","text":"<p>Precursor simulations are indicated by first setting <code>idriver = 1</code> in namoptions.xxx. The set-up of the precursor simulation is then up to the users discretion. The other variables to specify are:</p> <ul> <li><code>tdriverstart</code> - specifies the number of seconds after which the *driver* files will start being written. If the precursor simulation is not a warm start then it is recommended to allow a sufficient amount of time for the flow field to develop to the desired state before starting to write to the *driver* files.</li> <li><code>dtdriver</code> specifies the timestep in seconds at which the y-z planes are written to the *driver* files. It is important to set this to be small (ideally <code>dtdriver = dt</code>) in order to reduce the requirement to interpolate these fields in the resulting driven simulation. However, depending on the case, this can be made larger with the advantage being a reduction in size of the *driver* files that are produced.</li> <li><code>iplane</code> is the index in the x-direction that you want to save the instantaneous y-z planes. For many cases the expected value is <code>iplane = ie</code> so that the outlet of the precursor simulation is saved.</li> <li><code>driverstore</code> is the number of timesteps that the user wants to write to the *driver* files. The total simulation time should therefore be equal or greater to <code>tdriverstart + (driverstore-1)*dtdriver</code> seconds to ensure that the writing process completes. The driven simulation based off this precursor will be limited to a maximum run time of <code>(driverstore-1)*dtdriver</code> seconds (unless multiple precursors are run using warm starts).</li> </ul> <p>Outputs:</p> <ul> <li>A file for each prognostic variable (e.g. <code>u0</code>, <code>v0</code>, <code>w0</code>, <code>thl0</code> (if <code>ltempeq = .true.</code>) etc.) for each processor.The file names follow 'var\"driver\\_\"nproc\".\"$expnr' where $var indicates the variable (NOTE: h is potential temperature under this convention). These files will hold the corresponding instantaneous y-z planes over the specified time period and are to be used to drive a driven simulation.</li> </ul>"},{"location":"udales-simulation-setup/#running-driven-simulations","title":"Running driven simulations","text":"<p>It is necessary to first have run a simulation following the above instructions. Driven simulations are initiated by setting <code>idriver = 2</code>. The following are guidelines for setting up the driven simulation:</p> <ul> <li>The driven simulation must have the same <code>jtot</code>, <code>ysize</code>, <code>kmax</code> and <code>zgrid.inp.xxx</code> as its corresponding precursor simulation.</li> <li>The driven simulation must use the same number of cores as the precursor simulation.</li> <li>It is not necessary to apply a forcing to the driven simulation due to the enforced inlet-outlet boundary conditions.</li> <li><code>BCxm = 3</code> is the current index to enforce the required inlet-outlet boundary conditions. Boundary conditions in the x-direction for other prognostic variables will be overwritten by this and therefore do not need to be set.</li> <li>The *driver* files from the precursor simulation must be copied from its output directory to the experiments directory of the driven simulation. For example, if the precursor is 001 and the driven simulation is 002 and you are working from the top uDALES directory: <code>cp outputs/001/*driver* experiments/002/</code>.</li> <li><code>driverstore</code> must be equal to or less than the number of timesteps saved in the *driver* files (equivalent value of <code>driverstore</code> in the precursor simulation).</li> <li><code>driverjobnr</code> must equal the job number of the corresponding precursor simulation. Following the above example: <code>driverjobnr = 001</code>.</li> <li><code>runtime</code> must equal <code>(driverstore-1)*dtdriver</code> seconds or less where <code>dtdriver</code> is from the precursor simulation. If this time limit is exceeded the simulation will be stopped as there will be no more data available to determine the inlet.</li> <li>NOTE: It is important that buildings are not positioned too close to the downwind edge of the domain. The vortices and wakes downwind in the nearfield of the buildings can cause errors alongside the convective outflow boundary condition. The necessary distance is case specific. If this distance is too small a typical error will be that high velocities are found at the domain edge and these lead to slow simulations and dt tending to nought.</li> </ul>"}]}